worker_processes auto;

events {
    # Defines the maximum number of simultaneous connections that can be opened by a worker process.
    # This sets 1024 concurrent connections per worker. Increasing this can handle more clients,
    # but consumes more RAM. Should be tuned based on your server's capabilities.
    worker_connections 1024;
}

http {
    # Basic settings

    # Enables or disables the use of sendfile().
    # When enabled, NGINX uses the efficient sendfile system call for copying data from
    # file to socket, bypassing user space buffer and improving performance.
    sendfile on;

    # Used in conjunction with sendfile.
    # Causes NGINX to attempt to send its HTTP response headers in one packet,
    # followed by the file contents in another packet. 
    # This optimizes network usage by reducing the number of packets sent.
    tcp_nopush on;

    # Disables the Nagle algorithm for sending data.
    # This forces data to be sent immediately, rather than waiting to create larger packets.
    # Improves responsiveness for interactive applications at a slight cost to efficiency.
    tcp_nodelay on;

    # Sets how long client connections will stay open on the server side.
    # After 65 seconds of inactivity, the server will close the connection.
    # Balances between keeping connections open for reuse and freeing server resources.
    keepalive_timeout 65;

    # Sets the maximum size of the types hash tables.
    # A larger value decreases lookup time but uses more memory.
    # Default is usually adequate; increase if you get "types_hash" warnings.
    types_hash_max_size 2048;

    # Prevents NGINX from sending its version number in error pages and Server header.
    # This is a security measure to avoid revealing server software information to potential attackers.
    server_tokens off;

    # MIME types

    # Includes the file that maps file extensions to MIME types.
    # This allows NGINX to properly set Content-Type headers for responses.
    include /etc/nginx/mime.types;

    # Sets the default MIME type for responses when the type cannot be determined.
    # 'application/octet-stream' indicates a binary file, prompting browsers to download rather than display.
    default_type application/octet-stream;

    # Logging

    # Configures the path and format for the access log.
    # Records all requests to the server, useful for traffic analysis and troubleshooting.
    access_log /var/log/nginx/access.log;

    # Configures the path and format for the error log.
    # Records any errors encountered by NGINX, critical for debugging server issues.
    error_log /var/log/nginx/error.log;

    # Gzip compression

    # Enables gzip compression to reduce the size of transmitted data,
    # improving load times and reducing bandwidth usage.
    gzip on;

    # Disables gzip for MSIE 6.0 which had issues with compression.
    # This is for backwards compatibility with old Internet Explorer browsers.
    gzip_disable "msie6";

    # Adds the "Vary: Accept-Encoding" response header.
    # This header helps caches store both compressed and uncompressed versions
    # correctly based on client capabilities.
    gzip_vary on;

    # Sets which proxied requests should be compressed.
    # 'any' means compress responses to any proxied request.
    gzip_proxied any;

    # Sets the compression level (1-9).
    # Level 6 offers a good balance between CPU usage and compression ratio.
    # Higher values compress more but use more CPU.
    gzip_comp_level 6;

    # Configures the number and size of buffers for compression.
    # '16 8k' means 16 buffers of 8KB each.
    # This affects memory usage during compression.
    gzip_buffers 16 8k;

    # Sets minimum HTTP version for compression.
    # HTTP/1.1 supports better indication of compression support.
    gzip_http_version 1.1;

    # Lists all MIME types that should be compressed.
    # Includes text, JavaScript, CSS, and JSON - content that compresses well.
    # Images and videos are typically excluded as they're already compressed.
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Rate limiting zone

    # Creates a shared memory zone named "one" of 10MB to store client states.
    # Limits clients to 1 request per second based on their binary IP address.
    # Prevents brute force and DDoS attacks.
    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

    # Upstream for load balancing
    # Defines a group of servers that can be referenced later.
    # In this case, just one server (bun-web:4040) but could include multiple for true load balancing.
    upstream web_backend {
        server bun-web:4040;

        # Enables keepalive connections to the upstream servers.
        # Maintains 64 idle keepalive connections per worker process,
        # reducing the overhead of creating new connections.
        keepalive 64;
    }


    server {

        # Configures the server to listen on port 80 (HTTP).
        listen 80;

        # Wildcard server name that matches any hostname.
        # This makes the server block handle requests for all hostnames.
        server_name _;

        # Security headers

        # Restricts the page from being embedded in frames/iframes
        # except on the same origin, preventing clickjacking attacks.
        # TODO We can remove this from being set at the express layer now
        add_header X-Frame-Options "SAMEORIGIN";

        # Enables browser's built-in XSS filter and
        # prevents rendering of page if attack detected.
        add_header X-XSS-Protection "1; mode=block";

        # Prevents browsers from interpreting files as a different MIME type
        # than declared, preventing certain MIME-based attacks.
        add_header X-Content-Type-Options "nosniff";

        # Controls how much referrer information is included with requests.
        # This setting sends full referrer info except when moving from HTTPS to HTTP.
        add_header Referrer-Policy "no-referrer-when-downgrade";

        # This is a catch-all directive that applies to any resource type not explicitly covered by more specific directives. 
        # 'self' means that by default, the browser should only load resources (scripts, images, stylesheets, etc.) from the same origin as the page itself.
        # We use jsCDN so we cant do this yet, we would need to serve all of our own assets
        # Which we totally could do
        
        # add_header Content-Security-Policy "default-src 'self'" always;

        location / {

            # Passes requests to the defined upstream group.
            # All requests to the root location will be proxied to bun-web:4040.
            proxy_pass http://web_backend;

            # Sets HTTP/1.1 for proxy connections (required for WebSockets).
            proxy_http_version 1.1;

            # Required for WebSocket support - forwards upgrade requests.
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';

            # Passes the original host header to the backend.
            # Important if your application uses the Host header for routing or URLs.
            proxy_set_header Host $host;

            # Passes the real client IP to the backend.
            # Useful for logging and analytics in the application.
            proxy_set_header X-Real-IP $remote_addr;

            # Appends all client IPs in the request path.
            # Essential for applications that need to know the complete client IP chain.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Indicates the original protocol (HTTP/HTTPS) to the backend.
            # Crucial for applications that generate URLs based on the protocol.
            proxy_set_header X-Forwarded-Proto $scheme;

            # Ensures that responses are not cached when the Upgrade header is present.
            # Important for WebSocket connections and dynamic content.
            proxy_cache_bypass $http_upgrade;
            
            # Simple rate limiting
            # Applies rate limiting using the previously defined zone.
            # Allows burst of 10 requests, with 'nodelay' ensuring excess
            # requests are processed immediately if possible.
            # Protects against sudden traffic spikes while minimizing user impact.
            limit_req zone=one burst=10 nodelay;
        }

        # Cache static files
        # This location block matches any request for common static file types.
        # The regex pattern captures common image, icon, CSS, and JS extensions.
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            # Proxies these requests to the backend as well.
            # You could serve these directly from NGINX for better performance if files are available locally.
            proxy_pass http://web_backend;

            # Forwards the original host header to maintain proper URLs in static resources.
            proxy_set_header Host $host;

            # Forwards the client IP for logging purposes.
            proxy_set_header X-Real-IP $remote_addr;

            # Sets an expiration time of 7 days for these static resources.
            # Greatly improves performance by telling clients to cache these files.
            expires 7d;

            # Explicitly sets the Cache-Control header for more precise caching instructions.
            # 'public' allows any cache to store the response, 'max-age=604800' is 7 days in seconds.
            # This works together with the 'expires' directive to ensure consistent caching behavior.
            add_header Cache-Control "public, max-age=604800";
        }
    }
}